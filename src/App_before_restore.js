// ÏàòÏ†ïÎêú App.js - ÏÉàÎ°úÍ≥†Ïπ® ÌõÑ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ Î¨∏Ï†ú Ìï¥Í≤∞

import { GoogleOAuthProvider, googleLogout, useGoogleLogin } from '@react-oauth/google';
import { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import CryptoJS from 'crypto-js';
import { marked } from 'marked';
import DOMPurify from 'dompurify';

const CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;
const SCOPES = 'https://www.googleapis.com/auth/drive';
const SECRET_PREFIX = 'secret_';

// ÏïÑÏù¥ÏΩò Ïª¥Ìè¨ÎÑåÌä∏Îì§
const SunIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>;
const MoonIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>;
const BookIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path></svg>;
const LogoutIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>;

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
const saveToLocalStorage = (key, data) => {
  try {
    localStorage.setItem(`memo-app-${key}`, JSON.stringify(data));
    console.log(`üíæ Saved: ${key}`, data);
  } catch (error) {
    console.error('‚ùå Save failed:', error);
  }
};

const loadFromLocalStorage = (key) => {
  try {
    const data = localStorage.getItem(`memo-app-${key}`);
    return data ? JSON.parse(data) : null;
  } catch (error) {
    console.error('‚ùå Load failed:', error);
    return null;
  }
};

// UI Ïª¥Ìè¨ÎÑåÌä∏Îì§
const Spinner = ({ themeStyles }) => {
  useEffect(() => {
    const styleSheet = document.createElement("style");
    styleSheet.type = "text/css";
    styleSheet.innerText = `@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }`;
    document.head.appendChild(styleSheet);
    return () => { document.head.removeChild(styleSheet); };
  }, []);
  return ( <div style={themeStyles.spinnerOverlay}><div style={themeStyles.spinner}></div></div> );
};

const Toast = ({ show, message, type, themeStyles }) => {
  if (!show) return null;
  const toastStyle = type === 'success' ? themeStyles.toastSuccess : themeStyles.toastError;
  return ( <div style={{ ...themeStyles.toast, ...toastStyle }}>{message}</div> );
};

// Ïä§ÌÉÄÏùºÎßÅ
const getDynamicStyles = (theme = 'light') => {
    const colors = {
        light: { bg: '#f8f9fa', panelBg: '#ffffff', text: '#212529', textSecondary: '#6c757d', border: '#dee2e6', accent: '#007bff', accentText: '#ffffff', activeBg: '#e6f7ff', buttonBg: '#f1f3f5', buttonHoverBg: '#e9ecef', danger: '#dc3545', },
        dark: { bg: '#121212', panelBg: '#1e1e1e', text: '#e9ecef', textSecondary: '#adb5bd', border: '#495057', accent: '#0d6efd', accentText: '#ffffff', activeBg: '#032a58', buttonBg: '#343a40', buttonHoverBg: '#495057', danger: '#e03131', }
    };
    const c = colors[theme];
    return {
        container: { display: 'flex', height: '100vh', fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif", backgroundColor: c.bg, color: c.text },
        loginContainer: { margin: 'auto', textAlign: 'center' },
        loginButton: { padding: '12px 20px', fontSize: '16px', cursor: 'pointer', backgroundColor: c.accent, color: c.accentText, border: 'none', borderRadius: '5px' },
        leftPanel: { width: '320px', borderRight: `1px solid ${c.border}`, display: 'flex', flexDirection: 'column', backgroundColor: c.panelBg, flexShrink: 0 },
        rightPanel: { flexGrow: 1, padding: '20px', display: 'flex', flexDirection: 'column' },
        header: { padding: '15px', borderBottom: `1px solid ${c.border}`, display: 'flex', alignItems: 'center', justifyContent: 'space-between', flexShrink: 0 },
        profileSection: { display: 'flex', alignItems: 'center', gap: '10px' },
        profileImage: { borderRadius: '50%', width: '32px', height: '32px' },
        iconButton: { background: 'none', border: 'none', color: c.textSecondary, cursor: 'pointer', padding: '5px' },
        section: { padding: '15px' },
        input: { width: '100%', padding: '8px', boxSizing: 'border-box', border: `1px solid ${c.border}`, borderRadius: '5px', backgroundColor: c.bg, color: c.text, outline: 'none' },
        button: { padding: '10px', backgroundColor: c.accent, color: c.accentText, border: 'none', borderRadius: '5px', cursor: 'pointer', display: 'flex', alignItems: 'center', justifyContent: 'center' },
        notebookList: { listStyle: 'none', padding: 0, margin: '10px 0', overflowY: 'auto' },
        listItem: { padding: '10px 15px', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: '10px', borderRadius: '5px' },
        activeListItem: { padding: '10px 15px', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: '10px', borderRadius: '5px', backgroundColor: c.activeBg, fontWeight: 'bold' },
        memoList: { listStyle: 'none', padding: 0, margin: '10px 0 0 0', overflowY: 'auto' },
        memoListItem: { padding: '12px', borderTop: `1px solid ${c.border}`, cursor: 'pointer', display: 'flex', justifyContent: 'space-between', alignItems: 'center' },
        activeMemoListItem: { backgroundColor: c.activeBg },
        memoName: { whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' },
        deleteButton: { background: 'none', border: 'none', color: c.textSecondary, cursor: 'pointer', fontSize: '16px', padding: '5px', opacity: 0.7, transition: 'opacity 0.2s' },
        placeholder: { display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '100%', color: c.textSecondary, textAlign: 'center' },
        editorContainer: { display: 'flex', flexGrow: 1, flexDirection: 'column', backgroundColor: c.panelBg, border: `1px solid ${c.border}`, borderRadius: '8px' },
        editorHeader: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '10px', borderBottom: `1px solid ${c.border}` },
        viewModeToggle: { display: 'flex', border: `1px solid ${c.border}`, borderRadius: '5px', overflow: 'hidden' },
        toggleButton: { background: c.panelBg, border: 'none', padding: '8px 15px', cursor: 'pointer', color: c.text },
        toggleButtonActive: { background: c.accent, border: 'none', padding: '8px 15px', cursor: 'pointer', color: c.accentText },
        editorPane: { flexGrow: 1, display: 'flex', flexDirection: 'column' },
        memoContentArea: { flexGrow: 1, border: 'none', padding: '15px', fontSize: '16px', fontFamily: 'monospace', resize: 'none', outline: 'none', backgroundColor: c.panelBg, color: c.text },
        previewContent: { flexGrow: 1, padding: '15px', overflowY: 'auto', lineHeight: 1.7, backgroundColor: c.panelBg },
        spinnerOverlay: { position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 2000 },
        spinner: { border: '4px solid rgba(255, 255, 255, 0.3)', borderTop: '4px solid white', borderRadius: '50%', width: '40px', height: '40px', animation: 'spin 1s linear infinite' },
        toast: { position: 'fixed', bottom: '20px', left: '50%', transform: 'translateX(-50%)', padding: '12px 20px', borderRadius: '5px', color: 'white', zIndex: 1000 },
        toastSuccess: { backgroundColor: '#28a745' },
        toastError: { backgroundColor: '#dc3545' },
        debugInfo: { 
          position: 'fixed', 
          top: '10px', 
          right: '10px', 
          backgroundColor: c.panelBg, 
          border: `1px solid ${c.border}`, 
          borderRadius: '5px', 
          padding: '10px', 
          fontSize: '12px',
          maxWidth: '300px',
          zIndex: 1000
        },
        // üÜï ÏÉàÎ°úÏö¥ UI ÏöîÏÜåÎì§ÏùÑ ÏúÑÌïú Ïä§ÌÉÄÏùº
        modal: {
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 2000
        },
        modalContent: {
          backgroundColor: c.panelBg,
          padding: '20px',
          borderRadius: '8px',
          minWidth: '300px',
          maxWidth: '500px'
        },
        contextMenu: {
          position: 'absolute',
          backgroundColor: c.panelBg,
          border: `1px solid ${c.border}`,
          borderRadius: '5px',
          boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
          zIndex: 1500,
          minWidth: '120px'
        },
        contextMenuItem: {
          padding: '8px 12px',
          cursor: 'pointer',
          borderBottom: `1px solid ${c.border}`,
          ':hover': {
            backgroundColor: c.buttonHoverBg
          }
        },
        editInput: {
          backgroundColor: c.bg,
          border: `1px solid ${c.accent}`,
          borderRadius: '3px',
          padding: '4px 8px',
          fontSize: '14px',
          color: c.text,
          outline: 'none'
        },
        actionButtons: {
          display: 'flex',
          gap: '5px',
          marginLeft: 'auto'
        },
        smallButton: {
          padding: '4px 8px',
          fontSize: '12px',
          border: 'none',
          borderRadius: '3px',
          cursor: 'pointer'
        },
        editButton: {
          backgroundColor: c.accent,
          color: c.accentText
        },
        deleteButton: {
          backgroundColor: c.danger,
          color: 'white'
        },
        moveButton: {
          backgroundColor: '#28a745',
          color: 'white'
        }
    };
};

function MemoApp() {
  const [theme, setTheme] = useState(() => localStorage.getItem('memo-theme') || 'light');
  const styles = getDynamicStyles(theme);

  const [notebooks, setNotebooks] = useState([]);
  const [selectedNotebookId, setSelectedNotebookId] = useState('all');
  const [newNotebookName, setNewNotebookName] = useState('');
  const [user, setUser] = useState(null);
  const [accessToken, setAccessToken] = useState(null);
  const [memos, setMemos] = useState([]);
  const [newMemoContent, setNewMemoContent] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedMemo, setSelectedMemo] = useState(null);
  const [viewMode, setViewMode] = useState('edit');
  const [toast, setToast] = useState({ show: false, message: '', type: 'success' });
  const [memoAppFolderId, setMemoAppFolderId] = useState(null); // üî• Î©îÎ™®Ïï± Ï†ÑÏö© Ìè¥Îçî ID
  
  // üÜï ÏÉàÎ°úÏö¥ Í∏∞Îä•ÏùÑ ÏúÑÌïú ÏÉÅÌÉúÎì§
  const [editingNotebook, setEditingNotebook] = useState(null); // Ìé∏Ïßë Ï§ëÏù∏ ÎÖ∏Ìä∏Î∂Å
  const [showMoveModal, setShowMoveModal] = useState(false); // Î©îÎ™® Ïù¥Îèô Î™®Îã¨
  const [memoToMove, setMemoToMove] = useState(null); // Ïù¥ÎèôÌï† Î©îÎ™®
  const [targetNotebookId, setTargetNotebookId] = useState(''); // Ïù¥Îèô ÎåÄÏÉÅ ÎÖ∏Ìä∏Î∂Å
  
  // üîß ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ÏÉÅÌÉú
  const [debugInfo, setDebugInfo] = useState({
    tokenExists: false,
    apiWorking: false,
    lastError: '',
    dataLoadTime: null,
    memoAppFolderId: null
  });

  const showToast = useCallback((message, type = 'success', duration = 3000) => {
    console.log(`üì¢ Toast: ${type} - ${message}`);
    setToast({ show: true, message, type });
    setTimeout(() => { setToast({ show: false, message: '', type: 'success' }); }, duration);
  }, []);

  // üî• Î©îÎ™®Ïû• Ïï± Ï†ÑÏö© Ìè¥Îçî ÏÉùÏÑ± ÎòêÎäî Ï∞æÍ∏∞ (appDataFolder ÎåÄÏã† ÏÇ¨Ïö©)
  const ensureMemoAppFolder = async (token) => {
    try {
      // 1. Í∏∞Ï°¥ MemoApp Ìè¥Îçî Ï∞æÍ∏∞
      console.log('üîç MemoApp Ìè¥Îçî Í≤ÄÏÉâ Ï§ë...');
      const searchResponse = await axios.get('https://www.googleapis.com/drive/v3/files', {
        headers: { 'Authorization': `Bearer ${token}` },
        params: {
          q: "name='MemoApp' and mimeType='application/vnd.google-apps.folder' and trashed=false",
          fields: 'files(id, name)'
        }
      });
      
      const existingFolders = searchResponse.data.files || [];
      
      if (existingFolders.length > 0) {
        const folderId = existingFolders[0].id;
        console.log('‚úÖ Í∏∞Ï°¥ MemoApp Ìè¥Îçî Ï∞æÏùå:', folderId);
        setMemoAppFolderId(folderId);
        setDebugInfo(prev => ({ ...prev, memoAppFolderId: folderId }));
        return folderId;
      }
      
      // 2. MemoApp Ìè¥Îçî ÏÉùÏÑ±
      console.log('üìÅ MemoApp Ìè¥Îçî ÏÉùÏÑ± Ï§ë...');
      const createResponse = await axios.post(
        'https://www.googleapis.com/drive/v3/files',
        {
          name: 'MemoApp',
          mimeType: 'application/vnd.google-apps.folder'
        },
        { headers: { 'Authorization': `Bearer ${token}` } }
      );
      
      const folderId = createResponse.data.id;
      console.log('‚úÖ MemoApp Ìè¥Îçî ÏÉùÏÑ± ÏôÑÎ£å:', folderId);
      setMemoAppFolderId(folderId);
      setDebugInfo(prev => ({ ...prev, memoAppFolderId: folderId }));
      return folderId;
      
    } catch (error) {
      console.error('‚ùå MemoApp Ìè¥Îçî ÏÑ§Ï†ï Ïã§Ìå®:', error);
      throw error;
    }
  };

  // üîß Í∞ÑÎã®Ìïú API ÌÖåÏä§Ìä∏ Ìï®Ïàò
  const testGoogleAPI = async (token) => {
    try {
      console.log('üîç API ÌÖåÏä§Ìä∏ ÏãúÏûë...');
      
      // 1. ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
      const userResponse = await axios.get('https://www.googleapis.com/oauth2/v3/userinfo', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚úÖ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', userResponse.data);
      
      // 2. Drive Ï†ïÎ≥¥ ÌôïÏù∏
      const aboutResponse = await axios.get('https://www.googleapis.com/drive/v3/about?fields=user,storageQuota', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚úÖ Drive Ï†ïÎ≥¥:', aboutResponse.data);
      
      setDebugInfo(prev => ({ ...prev, apiWorking: true, lastError: '' }));
      return userResponse.data;
    } catch (error) {
      console.error('‚ùå API ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error);
      setDebugInfo(prev => ({ 
        ...prev, 
        apiWorking: false, 
        lastError: `${error.response?.status} ${error.response?.statusText || error.message}` 
      }));
      throw error;
    }
  };

  // üî• Î©îÎ™®ÏôÄ ÎÖ∏Ìä∏Î∂Å Îç∞Ïù¥ÌÑ∞ Î°úÎìú (ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ)
  const loadData = async (token) => {
    try {
      setIsLoading(true);
      setDebugInfo(prev => ({ ...prev, dataLoadTime: new Date().toLocaleTimeString() }));
      
      console.log('üìÅ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë...');
      
      // 1. ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
      const userData = await testGoogleAPI(token);
      setUser(userData);
      
      // 2. MemoApp Ìè¥Îçî ÌôïÎ≥¥
      const appFolderId = await ensureMemoAppFolder(token);
      
      // 3. ÎÖ∏Ìä∏Î∂Å Î°úÎìú (MemoApp Ìè¥Îçî ÌïòÏúÑÏùò Ìè¥ÎçîÎì§)
      console.log('üìÅ ÎÖ∏Ìä∏Î∂Å Î°úÎìú Ï§ë...');
      const notebooksResponse = await axios.get('https://www.googleapis.com/drive/v3/files', {
        headers: { 'Authorization': `Bearer ${token}` },
        params: {
          q: `'${appFolderId}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false`,
          fields: 'files(id, name, parents)',
          pageSize: 50
        }
      });
      
      const loadedNotebooks = notebooksResponse.data.files || [];
      console.log(`‚úÖ ÎÖ∏Ìä∏Î∂Å ${loadedNotebooks.length}Í∞ú Î°úÎìú:`, loadedNotebooks);
      setNotebooks(loadedNotebooks);
      saveToLocalStorage('notebooks', loadedNotebooks);

      // 4. Î©îÎ™® Î°úÎìú (MemoApp Ìè¥Îçî ÌïòÏúÑÏùò .txt ÌååÏùºÎì§)
      console.log('üìù Î©îÎ™® Î°úÎìú Ï§ë...');
      
      // MemoApp Ìè¥ÎçîÏôÄ ÌïòÏúÑ ÎÖ∏Ìä∏Î∂Å Ìè¥ÎçîÏóêÏÑú Î©îÎ™® Í≤ÄÏÉâ
      let allFoundMemos = [];
      
      // MemoApp Ìè¥Îçî ÏßÅÏ†ë ÌïòÏúÑ Î©îÎ™®Îì§
      const memosResponse = await axios.get('https://www.googleapis.com/drive/v3/files', {
        headers: { 'Authorization': `Bearer ${token}` },
        params: {
          q: `'${appFolderId}' in parents and mimeType='text/plain' and trashed=false`,
          fields: 'files(id, name, parents, createdTime, mimeType)',
          orderBy: 'createdTime desc',
          pageSize: 100
        }
      });
      
      const directMemos = memosResponse.data.files || [];
      console.log(`   ‚Üí MemoApp Ìè¥Îçî ÏßÅÏ†ë Î©îÎ™® ${directMemos.length}Í∞ú`);
      allFoundMemos = [...directMemos];
      
      // Í∞Å ÎÖ∏Ìä∏Î∂Å Ìè¥ÎçîÏùò Î©îÎ™®Îì§ÎèÑ Í≤ÄÏÉâ
      for (const notebook of loadedNotebooks) {
        try {
          const notebookMemosResponse = await axios.get('https://www.googleapis.com/drive/v3/files', {
            headers: { 'Authorization': `Bearer ${token}` },
            params: {
              q: `'${notebook.id}' in parents and mimeType='text/plain' and trashed=false`,
              fields: 'files(id, name, parents, createdTime, mimeType)',
              orderBy: 'createdTime desc',
              pageSize: 50
            }
          });
          
          const notebookMemos = notebookMemosResponse.data.files || [];
          console.log(`   ‚Üí ÎÖ∏Ìä∏Î∂Å "${notebook.name}" Î©îÎ™® ${notebookMemos.length}Í∞ú`);
          allFoundMemos = [...allFoundMemos, ...notebookMemos];
        } catch (error) {
          console.log(`   ‚Üí ÎÖ∏Ìä∏Î∂Å "${notebook.name}" Î©îÎ™® Î°úÎìú Ïã§Ìå®:`, error.response?.status);
        }
      }
      
      console.log(`‚úÖ Ï¥ù Î©îÎ™® ${allFoundMemos.length}Í∞ú Î∞úÍ≤¨`);
      setMemos(allFoundMemos);
      saveToLocalStorage('memos-all', allFoundMemos);
      
      showToast(`ÎÖ∏Ìä∏Î∂Å ${loadedNotebooks.length}Í∞ú, Î©îÎ™® ${allFoundMemos.length}Í∞ú Î°úÎìú ÏôÑÎ£å!`, 'success');
      
    } catch (error) {
      console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
      
      // Ïã§Ìå® Ïãú Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const cachedNotebooks = loadFromLocalStorage('notebooks') || [];
      const cachedMemos = loadFromLocalStorage('memos-all') || [];
      
      if (cachedNotebooks.length > 0) {
        setNotebooks(cachedNotebooks);
        console.log(`üìÇ Ï∫êÏãúÎêú ÎÖ∏Ìä∏Î∂Å ${cachedNotebooks.length}Í∞ú Î≥µÏõê`);
      }
      
      if (cachedMemos.length > 0) {
        setMemos(cachedMemos);
        console.log(`üìù Ï∫êÏãúÎêú Î©îÎ™® ${cachedMemos.length}Í∞ú Î≥µÏõê`);
      }
      
      showToast(`Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: ${error.response?.status || error.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // Î°úÍ∑∏Ïù∏ Ìï®Ïàò
  const login = useGoogleLogin({
    onSuccess: async (tokenResponse) => {
      console.log('üéâ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', tokenResponse);
      const token = tokenResponse.access_token;
      
      // ÌÜ†ÌÅ∞ Ï†ÄÏû•
      localStorage.setItem('memo-app-access-token', token);
      const expiryTime = Date.now() + (tokenResponse.expires_in || 3600) * 1000;
      localStorage.setItem('memo-app-token-expiry', expiryTime.toString());
      
      setAccessToken(token);
      setDebugInfo(prev => ({ ...prev, tokenExists: true }));
      
      // Ï¶âÏãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      await loadData(token);
    },
    onError: (errorResponse) => {
      console.error('‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', errorResponse);
      showToast('Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    },
    scope: SCOPES,
  });

  const handleLogout = () => {
    googleLogout();
    setUser(null);
    setAccessToken(null);
    setNotebooks([]);
    setMemos([]);
    setSelectedMemo(null);
    setSelectedNotebookId('all');
    setMemoAppFolderId(null);
    setDebugInfo({ tokenExists: false, apiWorking: false, lastError: '', dataLoadTime: null, memoAppFolderId: null });
    
    localStorage.removeItem('memo-app-access-token');
    localStorage.removeItem('memo-app-token-expiry');
  };

  // Ïï± ÏãúÏûë Ïãú ÌÜ†ÌÅ∞ Î≥µÏõê
  useEffect(() => {
    const savedToken = localStorage.getItem('memo-app-access-token');
    const savedExpiry = localStorage.getItem('memo-app-token-expiry');
    
    if (savedToken && savedExpiry) {
      const expiryTime = parseInt(savedExpiry);
      const now = Date.now();
      
      if (now < expiryTime - 10 * 60 * 1000) {
        console.log('üîß ÌÜ†ÌÅ∞ Î≥µÏõê Ï§ë...');
        setAccessToken(savedToken);
        setDebugInfo(prev => ({ ...prev, tokenExists: true }));
        
        // Î≥µÏõêÎêú ÌÜ†ÌÅ∞ÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        loadData(savedToken);
      } else {
        console.log('‚è∞ ÌÜ†ÌÅ∞ ÎßåÎ£å');
        localStorage.removeItem('memo-app-access-token');
        localStorage.removeItem('memo-app-token-expiry');
      }
    } else {
      // ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏñ¥ÎèÑ Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê
      const cachedNotebooks = loadFromLocalStorage('notebooks');
      const cachedMemos = loadFromLocalStorage('memos-all');
      
      if (cachedNotebooks) setNotebooks(cachedNotebooks);
      if (cachedMemos) setMemos(cachedMemos);
    }
  }, []);

  // ÎÖ∏Ìä∏Î∂Å ÏÑ†ÌÉù Ïãú Î©îÎ™® ÌïÑÌÑ∞ÎßÅ
  const getFilteredMemos = () => {
    if (selectedNotebookId === 'all') {
      return memos;
    } else {
      return memos.filter(memo => 
        memo.parents && memo.parents.includes(selectedNotebookId)
      );
    }
  };

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    localStorage.setItem('memo-theme', newTheme);
  };

  // üî• Î©îÎ™® ÏÉùÏÑ± (ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ - MemoApp Ìè¥Îçî ÏÇ¨Ïö©)
  const createMemo = async () => {
    if (!accessToken || !newMemoContent.trim() || !memoAppFolderId) {
      showToast('Î©îÎ™® ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', 'error');
      return;
    }
    
    setIsLoading(true);
    try {
      const firstLine = newMemoContent.split('\n')[0].slice(0, 30).trim();
      const safeFileName = firstLine.replace(/[\\/:*?"<>|]/g, "") + ".txt";
      const fileName = firstLine ? safeFileName : `memo-${Date.now()}.txt`;
      
      // üî• ÏÑ†ÌÉùÎêú ÎÖ∏Ìä∏Î∂Å ÎòêÎäî MemoApp Ìè¥ÎçîÏóê Ï†ÄÏû•
      const parentFolderId = selectedNotebookId === 'all' ? memoAppFolderId : selectedNotebookId;
      
      const metadata = { 
        name: fileName, 
        mimeType: 'text/plain', 
        parents: [parentFolderId] // üî• MemoApp Ìè¥Îçî ÎòêÎäî ÏÑ†ÌÉùÎêú ÎÖ∏Ìä∏Î∂ÅÏóê Ï†ÄÏû•
      };
      
      const boundary = '-------314159265358979323846';
      const delimiter = `\r\n--${boundary}\r\n`;
      const close_delim = `\r\n--${boundary}--`;
      const multipartRequestBody = delimiter + 
        'Content-Type: application/json; charset=UTF-8\r\n\r\n' + 
        JSON.stringify(metadata) + delimiter + 
        'Content-Type: text/plain; charset=UTF-8\r\n\r\n' + 
        newMemoContent + close_delim;
      
      const response = await axios.post(
        'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', 
        multipartRequestBody, 
        { 
          headers: { 
            'Authorization': `Bearer ${accessToken}`, 
            'Content-Type': `multipart/related; boundary=${boundary}` 
          } 
        }
      );
      
      console.log('‚úÖ Î©îÎ™® ÏÉùÏÑ± ÏôÑÎ£å:', response.data);
      
      // ÏÉà Î©îÎ™®Î•º Î™©Î°ùÏóê Ï∂îÍ∞Ä
      const newMemo = {
        id: response.data.id,
        name: fileName,
        mimeType: 'text/plain',
        parents: [parentFolderId],
        createdTime: new Date().toISOString()
      };
      
      setMemos(prevMemos => {
        const updatedMemos = [newMemo, ...prevMemos];
        saveToLocalStorage('memos-all', updatedMemos);
        return updatedMemos;
      });
      
      setNewMemoContent('');
      showToast('Î©îÎ™®Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!', 'success');
      
    } catch (error) {
      console.error('‚ùå Î©îÎ™® ÏÉùÏÑ± Ïã§Ìå®:', error);
      showToast('Î©îÎ™® Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // Î©îÎ™® ÎÇ¥Ïö© Í∞ÄÏ†∏Ïò§Í∏∞
  const getMemoContent = async (fileId, fileName) => {
    if (!accessToken) return;
    
    setIsLoading(true);
    try {
      const response = await axios.get(`https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`, {
        headers: { 'Authorization': `Bearer ${accessToken}` }
      });
      setSelectedMemo({ id: fileId, name: fileName, content: response.data });
    } catch (error) {
      console.error('‚ùå Î©îÎ™® ÎÇ¥Ïö© Î°úÎìú Ïã§Ìå®:', error);
      showToast('Î©îÎ™®Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // üî• ÎÖ∏Ìä∏Î∂Å ÏÉùÏÑ± (ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ - MemoApp Ìè¥Îçî ÏÇ¨Ïö©)
  const createNotebook = async () => {
    if (!accessToken || !newNotebookName.trim() || !memoAppFolderId) {
      showToast('ÎÖ∏Ìä∏Î∂Å Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', 'error');
      return;
    }
    
    setIsLoading(true);
    try {
      const metadata = { 
        name: newNotebookName, 
        mimeType: 'application/vnd.google-apps.folder', 
        parents: [memoAppFolderId] // üî• MemoApp Ìè¥Îçî ÌïòÏúÑÏóê ÏÉùÏÑ±
      };
      
      const response = await axios.post(
        'https://www.googleapis.com/drive/v3/files', 
        metadata, 
        { headers: { 'Authorization': `Bearer ${accessToken}` } }
      );
      
      console.log('‚úÖ ÎÖ∏Ìä∏Î∂Å ÏÉùÏÑ± ÏôÑÎ£å:', response.data);
      
      // ÏÉà ÎÖ∏Ìä∏Î∂ÅÏùÑ Î™©Î°ùÏóê Ï∂îÍ∞Ä
      const newNotebook = {
        id: response.data.id,
        name: response.data.name,
        parents: [memoAppFolderId]
      };
      
      setNotebooks(prevNotebooks => {
        const updatedNotebooks = [...prevNotebooks, newNotebook].sort((a, b) => a.name.localeCompare(b.name));
        saveToLocalStorage('notebooks', updatedNotebooks);
        return updatedNotebooks;
      });
      
      setNewNotebookName('');
      setSelectedNotebookId(response.data.id);
      showToast('ÎÖ∏Ìä∏Î∂ÅÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!', 'success');
      
    } catch (error) {
      console.error('‚ùå ÎÖ∏Ìä∏Î∂Å ÏÉùÏÑ± Ïã§Ìå®:', error);
      showToast('ÎÖ∏Ìä∏Î∂Å ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // Î©îÎ™® ÏóÖÎç∞Ïù¥Ìä∏
  const updateMemo = async () => {
    if (!accessToken || !selectedMemo) return;
    
    setIsLoading(true);
    try {
      const boundary = '-------314159265358979323846';
      const delimiter = `\r\n--${boundary}\r\n`;
      const close_delim = `\r\n--${boundary}--`;
      const multipartRequestBody = delimiter + 
        'Content-Type: application/json; charset=UTF-8\r\n\r\n' + 
        '{}' + delimiter + 
        'Content-Type: text/plain; charset=UTF-8\r\n\r\n' + 
        selectedMemo.content + close_delim;
      
      await axios.patch(
        `https://www.googleapis.com/upload/drive/v3/files/${selectedMemo.id}?uploadType=multipart`, 
        multipartRequestBody, 
        { 
          headers: { 
            'Authorization': `Bearer ${accessToken}`, 
            'Content-Type': `multipart/related; boundary=${boundary}` 
          } 
        }
      );
      
      console.log('‚úÖ Î©îÎ™® ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
      showToast('Î©îÎ™®Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!', 'success');
      
    } catch (error) {
      console.error('‚ùå Î©îÎ™® ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
      showToast('Î©îÎ™® Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // üÜï ÎÖ∏Ìä∏Î∂Å ÏàòÏ†ï Í∏∞Îä•
  const updateNotebook = async (notebookId, newName) => {
    if (!accessToken || !newName.trim()) {
      showToast('ÎÖ∏Ìä∏Î∂Å Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', 'error');
      return;
    }
    
    setIsLoading(true);
    try {
      const metadata = { name: newName };
      
      await axios.patch(
        `https://www.googleapis.com/drive/v3/files/${notebookId}`,
        metadata,
        { headers: { 'Authorization': `Bearer ${accessToken}` } }
      );
      
      console.log('‚úÖ ÎÖ∏Ìä∏Î∂Å Ïù¥Î¶Ñ Î≥ÄÍ≤Ω ÏôÑÎ£å:', newName);
      
      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setNotebooks(prevNotebooks => {
        const updatedNotebooks = prevNotebooks.map(notebook => 
          notebook.id === notebookId ? { ...notebook, name: newName } : notebook
        ).sort((a, b) => a.name.localeCompare(b.name));
        saveToLocalStorage('notebooks', updatedNotebooks);
        return updatedNotebooks;
      });
      
      setEditingNotebook(null);
      showToast('ÎÖ∏Ìä∏Î∂Å Ïù¥Î¶ÑÏù¥ Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§!', 'success');
      
    } catch (error) {
      console.error('‚ùå ÎÖ∏Ìä∏Î∂Å Ïù¥Î¶Ñ Î≥ÄÍ≤Ω Ïã§Ìå®:', error);
      showToast('ÎÖ∏Ìä∏Î∂Å Ïù¥Î¶Ñ Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // üÜï ÎÖ∏Ìä∏Î∂Å ÏÇ≠Ï†ú Í∏∞Îä•
  const deleteNotebook = async (notebookId) => {
    if (!accessToken) return;
    
    const notebook = notebooks.find(nb => nb.id === notebookId);
    if (!notebook) return;
    
    const confirmDelete = window.confirm(`"${notebook.name}" ÎÖ∏Ìä∏Î∂ÅÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÎÖ∏Ìä∏Î∂ÅÏùò Î™®Îì† Î©îÎ™®ÎèÑ Ìï®Íªò ÏÇ≠Ï†úÎê©ÎãàÎã§.`);
    if (!confirmDelete) return;
    
    setIsLoading(true);
    try {
      // ÎÖ∏Ìä∏Î∂Å ÏÇ≠Ï†ú (Google DriveÏóêÏÑúÎäî Ìú¥ÏßÄÌÜµÏúºÎ°ú Ïù¥Îèô)
      await axios.patch(
        `https://www.googleapis.com/drive/v3/files/${notebookId}`,
        { trashed: true },
        { headers: { 'Authorization': `Bearer ${accessToken}` } }
      );
      
      console.log('‚úÖ ÎÖ∏Ìä∏Î∂Å ÏÇ≠Ï†ú ÏôÑÎ£å:', notebook.name);
      
      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setNotebooks(prevNotebooks => {
        const updatedNotebooks = prevNotebooks.filter(nb => nb.id !== notebookId);
        saveToLocalStorage('notebooks', updatedNotebooks);
        return updatedNotebooks;
      });
      
      // Ìï¥Îãπ ÎÖ∏Ìä∏Î∂ÅÏùò Î©îÎ™®Îì§ÎèÑ Ï†úÍ±∞
      setMemos(prevMemos => {
        const updatedMemos = prevMemos.filter(memo => 
          !memo.parents || !memo.parents.includes(notebookId)
        );
        saveToLocalStorage('memos-all', updatedMemos);
        return updatedMemos;
      });
      
      // ÏÇ≠Ï†úÎêú ÎÖ∏Ìä∏Î∂ÅÏù¥ ÏÑ†ÌÉùÎêòÏñ¥ ÏûàÏóàÎã§Î©¥ 'Î™®Îì† Î©îÎ™®'Î°ú Î≥ÄÍ≤Ω
      if (selectedNotebookId === notebookId) {
        setSelectedNotebookId('all');
      }
      
      showToast('ÎÖ∏Ìä∏Î∂ÅÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!', 'success');
      
    } catch (error) {
      console.error('‚ùå ÎÖ∏Ìä∏Î∂Å ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      showToast('ÎÖ∏Ìä∏Î∂Å ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // üÜï Î©îÎ™® Ïù¥Îèô Í∏∞Îä•
  const moveMemo = async (memoId, targetNotebookId) => {
    if (!accessToken || !memoId || !targetNotebookId) return;
    
    setIsLoading(true);
    try {
      const targetFolderId = targetNotebookId === 'main' ? memoAppFolderId : targetNotebookId;
      
      // Î©îÎ™®Ïùò Î∂ÄÎ™® Ìè¥Îçî Î≥ÄÍ≤Ω
      const memo = memos.find(m => m.id === memoId);
      if (!memo) throw new Error('Î©îÎ™®Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      
      const currentParents = memo.parents ? memo.parents.join(',') : '';
      
      await axios.patch(
        `https://www.googleapis.com/drive/v3/files/${memoId}`,
        {},
        {
          headers: { 'Authorization': `Bearer ${accessToken}` },
          params: {
            addParents: targetFolderId,
            removeParents: currentParents
          }
        }
      );
      
      console.log('‚úÖ Î©îÎ™® Ïù¥Îèô ÏôÑÎ£å');
      
      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setMemos(prevMemos => {
        const updatedMemos = prevMemos.map(memo => 
          memo.id === memoId ? { ...memo, parents: [targetFolderId] } : memo
        );
        saveToLocalStorage('memos-all', updatedMemos);
        return updatedMemos;
      });
      
      setShowMoveModal(false);
      setMemoToMove(null);
      setTargetNotebookId('');
      showToast('Î©îÎ™®Í∞Ä Ïù¥ÎèôÎêòÏóàÏäµÎãàÎã§!', 'success');
      
    } catch (error) {
      console.error('‚ùå Î©îÎ™® Ïù¥Îèô Ïã§Ìå®:', error);
      showToast('Î©îÎ™® Ïù¥ÎèôÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // üÜï Î©îÎ™® ÏÇ≠Ï†ú Í∏∞Îä•
  const deleteMemo = async (memoId, memoName) => {
    if (!accessToken) return;
    
    const confirmDelete = window.confirm(`"${memoName}" Î©îÎ™®Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`);
    if (!confirmDelete) return;
    
    setIsLoading(true);
    try {
      // Î©îÎ™® ÏÇ≠Ï†ú (Ìú¥ÏßÄÌÜµÏúºÎ°ú Ïù¥Îèô)
      await axios.patch(
        `https://www.googleapis.com/drive/v3/files/${memoId}`,
        { trashed: true },
        { headers: { 'Authorization': `Bearer ${accessToken}` } }
      );
      
      console.log('‚úÖ Î©îÎ™® ÏÇ≠Ï†ú ÏôÑÎ£å:', memoName);
      
      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setMemos(prevMemos => {
        const updatedMemos = prevMemos.filter(memo => memo.id !== memoId);
        saveToLocalStorage('memos-all', updatedMemos);
        return updatedMemos;
      });
      
      // ÏÇ≠Ï†úÎêú Î©îÎ™®Í∞Ä ÏÑ†ÌÉùÎêòÏñ¥ ÏûàÏóàÎã§Î©¥ ÏÑ†ÌÉù Ìï¥Ï†ú
      if (selectedMemo && selectedMemo.id === memoId) {
        setSelectedMemo(null);
      }
      
      showToast('Î©îÎ™®Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!', 'success');
      
    } catch (error) {
      console.error('‚ùå Î©îÎ™® ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      showToast('Î©îÎ™® ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div style={styles.container}>
      {isLoading && <Spinner themeStyles={styles} />}
      <Toast show={toast.show} message={toast.message} type={toast.type} themeStyles={styles} />
      
      {/* üîß ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ÌëúÏãú */}
      {accessToken && (
        <div style={styles.debugInfo}>
          <strong>üîß ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥</strong><br />
          ÌÜ†ÌÅ∞: {debugInfo.tokenExists ? '‚úÖ' : '‚ùå'}<br />
          API: {debugInfo.apiWorking ? '‚úÖ' : '‚ùå'}<br />
          Ìè¥Îçî: {debugInfo.memoAppFolderId ? '‚úÖ' : '‚ùå'}<br />
          {debugInfo.lastError && <>Ïò§Î•ò: {debugInfo.lastError}<br /></>}
          {debugInfo.dataLoadTime && <>Î°úÎìú: {debugInfo.dataLoadTime}<br /></>}
          ÎÖ∏Ìä∏Î∂Å: {notebooks.length}Í∞ú<br />
          Î©îÎ™®: {memos.length}Í∞ú
        </div>
      )}
      
      {!accessToken ? (
        <div style={styles.loginContainer}>
          <h1>Î©îÎ™®Ïû• Ïï±</h1>
          <p>Google DriveÏôÄ Ïó∞ÎèôÌïòÏó¨ Î©îÎ™®Î•º ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏû•ÌïòÏÑ∏Ïöî.</p>
          <button style={styles.loginButton} onClick={login}>GoogleÎ°ú Î°úÍ∑∏Ïù∏</button>
        </div>
      ) : (
        <>
          <div style={styles.leftPanel}>
            <div style={styles.header}>
              <div style={styles.profileSection}>
                {user?.picture && <img src={user.picture} alt="Profile" style={styles.profileImage} />}
                <span>{user?.name || 'User'}</span>
              </div>
              <div style={{display: 'flex', gap: '5px'}}>
                <button 
                  style={{...styles.iconButton, border: `1px solid ${styles.border}`, borderRadius: '3px', padding: '4px'}} 
                  onClick={() => loadData(accessToken)}
                  title="Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®"
                >
                  üîÑ
                </button>
                <button style={styles.iconButton} onClick={toggleTheme} title="ÌÖåÎßà Î≥ÄÍ≤Ω">
                  {theme === 'light' ? <MoonIcon /> : <SunIcon />}
                </button>
                <button style={styles.iconButton} onClick={handleLogout} title="Î°úÍ∑∏ÏïÑÏõÉ">
                  <LogoutIcon />
                </button>
              </div>
            </div>
            
            <div style={styles.section}>
              <h3>üìÅ ÎÖ∏Ìä∏Î∂Å</h3>
              
              {/* ÏÉà ÎÖ∏Ìä∏Î∂Å ÏÉùÏÑ± */}
              <div style={{marginBottom: '10px'}}>
                <div style={{display: 'flex', gap: '5px'}}>
                  <input 
                    type="text" 
                    placeholder="ÏÉà ÎÖ∏Ìä∏Î∂Å Ïù¥Î¶Ñ..." 
                    value={newNotebookName} 
                    onChange={(e) => setNewNotebookName(e.target.value)} 
                    style={{...styles.input, flex: 1}}
                    onKeyPress={(e) => e.key === 'Enter' && createNotebook()}
                  />
                  <button 
                    onClick={createNotebook} 
                    style={{...styles.button, padding: '8px 12px'}}
                    disabled={!newNotebookName.trim()}
                  >
                    ‚ûï
                  </button>
                </div>
              </div>
              
              <ul style={styles.notebookList}>
                <li 
                  style={selectedNotebookId === 'all' ? styles.activeListItem : styles.listItem} 
                  onClick={() => setSelectedNotebookId('all')}
                >
                  üìã Î™®Îì† Î©îÎ™®
                </li>
                {notebooks.map(notebook => (
                  <li 
                    key={notebook.id} 
                    style={selectedNotebookId === notebook.id ? styles.activeListItem : styles.listItem}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                      <div 
                        style={{ display: 'flex', alignItems: 'center', gap: '10px', flex: 1, cursor: 'pointer' }}
                        onClick={() => setSelectedNotebookId(notebook.id)}
                      >
                        <BookIcon />
                        {editingNotebook === notebook.id ? (
                          <input
                            type="text"
                            defaultValue={notebook.name}
                            style={styles.editInput}
                            autoFocus
                            onBlur={(e) => {
                              if (e.target.value.trim() && e.target.value !== notebook.name) {
                                updateNotebook(notebook.id, e.target.value.trim());
                              } else {
                                setEditingNotebook(null);
                              }
                            }}
                            onKeyPress={(e) => {
                              if (e.key === 'Enter') {
                                e.target.blur();
                              }
                            }}
                            onClick={(e) => e.stopPropagation()}
                          />
                        ) : (
                          <span>{notebook.name}</span>
                        )}
                      </div>
                      
                      <div style={styles.actionButtons}>
                        <button
                          style={{...styles.smallButton, ...styles.editButton}}
                          onClick={(e) => {
                            e.stopPropagation();
                            setEditingNotebook(notebook.id);
                          }}
                          title="ÎÖ∏Ìä∏Î∂Å Ïù¥Î¶Ñ ÏàòÏ†ï"
                        >
                          ‚úèÔ∏è
                        </button>
                        <button
                          style={{...styles.smallButton, ...styles.deleteButton}}
                          onClick={(e) => {
                            e.stopPropagation();
                            deleteNotebook(notebook.id);
                          }}
                          title="ÎÖ∏Ìä∏Î∂Å ÏÇ≠Ï†ú"
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
            
            <div style={{...styles.section, flexGrow: 1, display: 'flex', flexDirection: 'column'}}>
              <h3>üìù Î©îÎ™®</h3>
              
              {/* ÏÉà Î©îÎ™® ÏûëÏÑ± ÏòÅÏó≠ */}
              <div style={{marginBottom: '15px'}}>
                <textarea 
                  placeholder="ÏÉà Î©îÎ™®Î•º ÏûëÏÑ±ÌïòÏÑ∏Ïöî..." 
                  value={newMemoContent} 
                  onChange={(e) => setNewMemoContent(e.target.value)} 
                  style={{
                    ...styles.input, 
                    height: '80px', 
                    resize: 'vertical',
                    marginBottom: '5px'
                  }}
                />
                <button 
                  onClick={createMemo} 
                  style={{
                    ...styles.button, 
                    width: '100%',
                    padding: '8px'
                  }}
                  disabled={!newMemoContent.trim()}
                >
                  üíæ Î©îÎ™® Ï†ÄÏû•
                </button>
              </div>
              
              <ul style={styles.memoList}>
                {getFilteredMemos().map(memo => (
                  <li 
                    key={memo.id} 
                    style={{ 
                      ...styles.memoListItem, 
                      ...(selectedMemo?.id === memo.id ? styles.activeMemoListItem : {}) 
                    }}
                  >
                    <div 
                      style={{ ...styles.memoName, flex: 1, cursor: 'pointer' }}
                      onClick={() => getMemoContent(memo.id, memo.name)}
                    >
                      {memo.name.startsWith(SECRET_PREFIX) ? 'üîí ' : 'üìÑ '}
                      {memo.name.replace('.txt', '').replace(SECRET_PREFIX, '')}
                      <div style={{fontSize: '12px', color: styles.textSecondary, marginTop: '2px'}}>
                        {memo.createdTime ? new Date(memo.createdTime).toLocaleDateString('ko-KR') : 'ÎÇ†Ïßú ÏóÜÏùå'}
                      </div>
                    </div>
                    
                    <div style={styles.actionButtons}>
                      <button
                        style={{...styles.smallButton, ...styles.moveButton}}
                        onClick={(e) => {
                          e.stopPropagation();
                          setMemoToMove(memo);
                          setShowMoveModal(true);
                        }}
                        title="Î©îÎ™® Ïù¥Îèô"
                      >
                        üìÅ
                      </button>
                      <button
                        style={{...styles.smallButton, ...styles.deleteButton}}
                        onClick={(e) => {
                          e.stopPropagation();
                          deleteMemo(memo.id, memo.name);
                        }}
                        title="Î©îÎ™® ÏÇ≠Ï†ú"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          </div>
          
          <div style={styles.rightPanel}>
            {selectedMemo ? (
              <div style={styles.editorContainer}>
                <div style={styles.editorHeader}>
                  <div style={styles.viewModeToggle}>
                    <button style={viewMode === 'edit' ? styles.toggleButtonActive : styles.toggleButton} onClick={() => setViewMode('edit')}>Ìé∏Ïßë</button>
                    <button style={viewMode === 'preview' ? styles.toggleButtonActive : styles.toggleButton} onClick={() => setViewMode('preview')}>ÎØ∏Î¶¨Î≥¥Í∏∞</button>
                  </div>
                  <button 
                    style={{...styles.button, padding: '8px 15px'}} 
                    onClick={updateMemo}
                    disabled={isLoading}
                  >
                    {isLoading ? 'Ï†ÄÏû• Ï§ë...' : 'üíæ Ï†ÄÏû•'}
                  </button>
                </div>
                <div style={styles.editorPane}>
                  {viewMode === 'edit' ? (
                    <textarea 
                      style={styles.memoContentArea} 
                      value={selectedMemo.content} 
                      onChange={(e) => setSelectedMemo({ ...selectedMemo, content: e.target.value })} 
                    />
                  ) : (
                    <div style={styles.previewContent} dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(marked.parse(selectedMemo.content || '')) }}></div>
                  )}
                </div>
              </div>
            ) : ( 
              <div style={styles.placeholder}>
                <h2>üéâ Î©îÎ™®Ïû• Ïï± ÏôÑÏÑ±!</h2>
                <p>‚Üê ÏôºÏ™ΩÏóêÏÑú Î©îÎ™®Î•º ÏÑ†ÌÉùÌï¥Î≥¥ÏÑ∏Ïöî.</p>
                
                <div style={{marginTop: '20px', textAlign: 'left'}}>
                  <h4>‚úÖ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Í∏∞Îä•:</h4>
                  <p>‚Ä¢ ÎÖ∏Ìä∏Î∂Å ÏÉùÏÑ±, ÏàòÏ†ï, ÏÇ≠Ï†ú</p>
                  <p>‚Ä¢ Î©îÎ™® ÏÉùÏÑ±, Ìé∏Ïßë, ÏÇ≠Ï†ú</p>
                  <p>‚Ä¢ Î©îÎ™® ÎÖ∏Ìä∏Î∂Å Í∞Ñ Ïù¥Îèô</p>
                  <p>‚Ä¢ ÏÉàÎ°úÍ≥†Ïπ® ÌõÑ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ</p>
                  <p>‚Ä¢ ÎßàÌÅ¨Îã§Ïö¥ ÎØ∏Î¶¨Î≥¥Í∏∞</p>
                  
                  <h4 style={{marginTop: '15px'}}>üéØ ÏÇ¨Ïö©Î≤ï:</h4>
                  <p>‚Ä¢ ÎÖ∏Ìä∏Î∂Å: ‚úèÔ∏è ÏàòÏ†ï, üóëÔ∏è ÏÇ≠Ï†ú</p>
                  <p>‚Ä¢ Î©îÎ™®: üìÅ Ïù¥Îèô, üóëÔ∏è ÏÇ≠Ï†ú</p>
                </div>
              </div> 
            )}
          </div>
        </>
      )}
      
      {/* üÜï Î©îÎ™® Ïù¥Îèô Î™®Îã¨ */}
      {showMoveModal && memoToMove && (
        <div style={styles.modal}>
          <div style={styles.modalContent}>
            <h3>Î©îÎ™® Ïù¥Îèô</h3>
            <p>"{memoToMove.name.replace('.txt', '').replace(SECRET_PREFIX, '')}" Î©îÎ™®Î•º Ïñ¥ÎîîÎ°ú Ïù¥ÎèôÌïòÏãúÍ≤†ÏäµÎãàÍπå?</p>
            
            <div style={{ margin: '15px 0' }}>
              <select
                value={targetNotebookId}
                onChange={(e) => setTargetNotebookId(e.target.value)}
                style={{
                  ...styles.input,
                  marginBottom: '10px'
                }}
              >
                <option value="">Ïù¥ÎèôÌï† ÏúÑÏπòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                <option value="main">üìã Î©îÏù∏ (Î™®Îì† Î©îÎ™®)</option>
                {notebooks.map(notebook => (
                  <option key={notebook.id} value={notebook.id}>
                    üìÅ {notebook.name}
                  </option>
                ))}
              </select>
            </div>
            
            <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>
              <button
                style={{
                  ...styles.button,
                  backgroundColor: '#6c757d',
                  padding: '8px 15px'
                }}
                onClick={() => {
                  setShowMoveModal(false);
                  setMemoToMove(null);
                  setTargetNotebookId('');
                }}
              >
                Ï∑®ÏÜå
              </button>
              <button
                style={{
                  ...styles.button,
                  backgroundColor: '#28a745',
                  padding: '8px 15px'
                }}
                onClick={() => {
                  if (targetNotebookId) {
                    moveMemo(memoToMove.id, targetNotebookId);
                  } else {
                    showToast('Ïù¥ÎèôÌï† ÏúÑÏπòÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.', 'error');
                  }
                }}
                disabled={!targetNotebookId}
              >
                Ïù¥Îèô
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function App() {
  return ( <GoogleOAuthProvider clientId={CLIENT_ID}><MemoApp /></GoogleOAuthProvider> );
}

export default App;
